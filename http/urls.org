#+TITLE: Medley Curl Testbench
#+STARTUP: overview hideblocks
#+PROPERTY: header-args  :var host="http://localhost:8085"
#+PROPERTY: header-args+ :var json="application/json"
#+PROPERTY: header-args+ :var text="text/plain"
#+PROPERTY: header-args+ :var org="text/x-org"
#+PROPERTY: header-args+ :results output

This is a suite of code snippets for exercising app URLs with curl.

* Bucketpull
Download files from a storage bucket.

** POST
#+NAME: bucketpull_gcp
#+BEGIN_SRC sh :wrap export html
curl -i -d "service=gcp" "$host/bucketpull"
#+END_SRC

* Countries
** GET
Download the latest dataset and store in registry.

#+NAME: countries_get
#+BEGIN_SRC sh :wrap export html
curl -i "$host/countries"
#+END_SRC

* Geodb
** HEAD
#+NAME: geodb_head
#+BEGIN_SRC sh :wrap export http
curl -I "$host/geodb"
#+END_SRC

** POST
#+NAME: geodb_post
#+BEGIN_SRC sh :wrap export http
curl -i -d "action=update" "$host/geodb"
#+END_SRC
* Headers
** GET
Display the headers of the request.

#+NAME: headers_get_html
#+BEGIN_SRC sh :wrap EXPORT html
curl "$host/headers"
#+END_SRC

#+NAME: headers_get_json
#+BEGIN_SRC sh :wrap EXPORT json
curl -H "Accept: $json" "$host/headers" | jq .
#+END_SRC

#+NAME: headers_get_text
#+BEGIN_SRC sh :wrap EXPORT text
curl -H "Accept: $text" "$host/headers"
#+END_SRC

* Homepage
** GET
Display a list of applications

#+NAME: homepage_get_html
#+BEGIN_SRC sh :wrap export html
curl "$host/"
#+END_SRC

#+NAME: homepage_get_org
#+BEGIN_SRC sh :wrap export org
curl -H "Accept: $org" "$host"
#+END_SRC

#+NAME: homepage_get_org_all
#+BEGIN_SRC sh :wrap export org
curl -H "Accept: $org" "$host/all"
#+END_SRC

** HEAD
Client-side caching is done via ETags.

#+NAME: homepage_head
#+BEGIN_SRC sh :wrap export
curl -i -I "$host/"
#+END_SRC

#+NAME: homepage_head_if_none_match
#+BEGIN_SRC sh
curl -i -I -H "If-None-Match: e3e5f241ef61db2c61aa327dc1c0394c" "$host/"
#+END_SRC

* Ledger
** Tag
*** GET tags
#+NAME: ledger_get_transactions_json
#+BEGIN_SRC sh :wrap EXPORT json
curl -H "Accept: $json" "$host/ledger/tags?q=tag1"
#+END_SRC
** Transaction
*** POST transaction
#+NAME: ledger_post_transaction_input
#+BEGIN_EXAMPLE
{
  "account_id": 1,
  "occurred_on": "2020-01-01",
  "cleared_on": "2020-01-02",
  "amount": 9.99,
  "payee": "test payee",
  "note": "test note",
  "tags": ["tag1", "tag2", "tag3"]
}
#+END_EXAMPLE

#+NAME: ledger_post_transaction
#+HEADER: :stdin ledger_post_transaction_input
#+BEGIN_SRC sh :wrap EXPORT json
curl -i --data-binary @- -H "Accept: $json" -H "Content-Type: $json" "$host/ledger/transactions"
#+END_SRC

*** PUT transaction
#+NAME: ledger_put_transaction_input
#+BEGIN_EXAMPLE
{
  "uid": 1,
  "account_id": 1,
  "occurred_on": "2020-02-01",
  "cleared_on": "2020-02-02",
  "amount": 5.55,
  "payee": "test payee updated",
  "note": "test note updated",
  "tags": ["tag4", "tag5"]
}
#+END_EXAMPLE

#+NAME: ledger_put_transaction
#+HEADER: :stdin ledger_put_transaction_input
#+BEGIN_SRC sh :wrap EXPORT json
curl -i -X PUT --data-binary @- -H "Accept: $json" -H "Content-Type: $json" "$host/ledger/transactions/1"
#+END_SRC

*** GET transactions
#+NAME: ledger_search_transactions_json
#+BEGIN_SRC sh :wrap EXPORT json
curl -H "Accept: $json" "$host/ledger/transactions?q=asdf"
#+END_SRC

*** DELETE transaction
#+NAME: ledger_delete_transaction
#+BEGIN_SRC sh :wrap
curl -i -X DELETE "$host/ledger/transactions/1"
#+END_SRC

** Acknowledgment
*** POST acknowledgment
#+NAME: ledger_post_acknowledgment_input
#+BEGIN_EXAMPLE
{
  "amount": 9.99,
  "payee": "test"
  "source": "email",
}
#+END_EXAMPLE

#+NAME: ledger_post_acknowledgment_input
#+HEADER: :stdin ledger_post_acknowledgment_input
#+BEGIN_SRC sh :wrap EXPORT json
curl -i --data-binary @- -H "Accept: $json" -H "Content-Type: $json" "$host/ledger/acknowledgment"
#+END_SRC

* Logindex
** POST bucket
Ask the server to ingest an hourly log file downloaded from a GCP
storage bucket.

#+NAME: logindex_post_bucket
#+BEGIN_SRC sh :wrap EXPORT http
DATE=$(date +"%Y/%m/%d")
FILE="appengine.googleapis.com/request_log/$DATE/01:00:00_01:59:59_S0.json"
curl -i -d "path=$FILE" "$host/logindex/bucket/gcp/appengine"
#+END_SRC

** POST date
Ask the server to ingest one or more log files by date.

#+NAME: logindex_post_date
#+BEGIN_SRC sh :wrap EXPORT http
YESTERDAY=$(date --date yesterday +"%Y-%m-%d")
TODAY=$(date +"%Y-%m-%d")
curl -i -d "start=$YESTERDAY" -d "end=$TODAY" "$host/logindex"
#+END_SRC

* Maintenance
** POST
Start maintenance tasks.

#+NAME: maintenance_post
#+BEGIN_SRC sh :wrap export http
curl -i -d "group=db" "$host/maintenance"
#+END_SRC

* Notification
** POST

* Recipes
** DELETE
Mark a recipe for deletion.

#+NAME: recipe_delete
#+BEGIN_SRC sh :wrap export http
curl -i -X DELETE "$host/recipes/1"
#+END_SRC

** GET
Retrieve a single recipe, a list of a recipes with a given tag, or a
list of tags.

#+NAME: recipe_get_recipe
#+BEGIN_SRC sh :wrap export http
curl -i "$host/recipes/1"
#+END_SRC

#+NAME: recipe_get_tag
#+BEGIN_SRC sh :wrap export http
curl -i "$host/recipes/tag/one"
#+END_SRC
** POST
Store a new recipe in the database or update an existing recipe.

#+NAME: recipe_post_new
#+BEGIN_SRC sh :wrap export http
curl -i -d "title=My recipe" -d "url=http://example.com" -d "body=hello world" -d "tags=one,two,three" "$host/recipes"
#+END_SRC

#+NAME: recipe_post_update
#+BEGIN_SRC sh :wrap export http
curl -i -X PUT -d "title=Edited title" -d "url=http://example.com" -d "body=Edited body" -d "tags=one,nine,eight"  "$host/recipes/1"
#+END_SRC

* Redirect
** GET
#+NAME: redirect_no_url
#+BEGIN_SRC sh :wrap export http
curl -i "$host/redirect"
#+END_SRC

#+NAME: redirect_enencoded_url
#+BEGIN_SRC sh :wrap export http
curl -i "$host/redirect?u=http://example.com"
#+END_SRC

#+NAME: redirect_encoded_url
#+BEGIN_SRC sh :wrap export http
curl -i "$host/redirect?u=http%3A%2F%2Fexample.com"
#+END_SRC
* Registry
** DELETE
Delete a row from the registry

#+NAME: registry_delete_id
#+BEGIN_SRC sh :wrap export http
curl -i -X DELETE "$host/registry/1"
#+END_SRC

** GET
*** Key groups
Retrieve a list of key groups.

#+NAME: registry_get_groups
#+BEGIN_SRC sh :wrap export http
curl -i "$host/registry"
#+END_SRC

#+NAME: registry_get_groups_json
#+BEGIN_SRC sh :wrap export http
curl -i -H "Accept: $json" "$host/registry"
#+END_SRC
*** Search
Search for records by key.

#+NAME: registry_search
#+BEGIN_SRC sh :wrap export http
curl -i "$host/registry?q=config"
#+END_SRC

#+NAME: registry_search_json
#+BEGIN_SRC sh :wrap export json
curl -H "Accept: $json" "$host/registry?q=config"
#+END_SRC

** POST
*** Create

#+NAME: registry_post_create
#+BEGIN_SRC sh :wrap export html
curl -i -d "key=test" -d "value=text" "$host/registry"
#+END_SRC

*** Update
#+NAME: registry_post_update
#+BEGIN_SRC sh :wrap export html
curl -i -d "key=test UPDATED" -d "value=test UPDATED"  "$host/registry/1728"
#+END_SRC

* Speak
** GET
Display the current mute status.

#+NAME: speak_get
#+BEGIN_SRC sh :wrap export http
curl -i "$host/speak"
#+END_SRC

** POST
Submit text to be spoken by the server.

#+NAME: speak_post
#+BEGIN_SRC sh :wrap EXPORT http
curl -i -d "statement=hello world" "$host/speak"
#+END_SRC

#+NAME: speak_post_confirmation
#+BEGIN_SRC sh :wrap EXPORT http
curl -i -d "statement=hello world" -d "confirm=1" "$host/speak"
#+END_SRC

#+NAME: speak_post_toggle_mute
#+BEGIN_SRC sh :wrap EXPORT http
curl -i -d "statement=hello world" -d "action=toggle" "$host/speak"
#+END_SRC

#+NAME: speak_post_notification_input
#+BEGIN_EXAMPLE
{
  "deliveryStyle": "normal",
  "body": "",
  "localId": "test",
  "title": "ðŸ“¦ test ðŸ“¦",
  "group": "",
  "source": "",
  "url": "http://example.com",
  "publicId": "abcde123",
  "badge": ""
}
#+END_EXAMPLE

#+NAME: speak_post_notification
#+HEADER: :stdin speak_post_notification_input
#+BEGIN_SRC sh :wrap EXPORT json
curl -i --data-binary @-  -H "Accept: $json" -H "Content-Type: $json" "$host/speak/notification"
#+END_SRC

* Weather
** POST

#+NAME: speak_weather
#+BEGIN_SRC sh :wrap EXPORT http
curl -i -d "parts=all" "$host/weather/speak"
#+END_SRC
* Warehouse
** PUT
#+NAME: warehouse_put_svg
#+BEGIN_SRC sh :wrap EXPORT http
curl -i -X PUT \
   -F "content=@apps/static/svg/medley.svg" \
   -F "content_type=image/svg+xml" \
   "$host/warehouse/test/path.svg"
#+END_SRC

** GET
#+NAME: warehouse_get_svg
#+BEGIN_SRC sh :wrap EXPORT http
curl -i \
   "$host/warehouse/test/path.svg"
#+END_SRC

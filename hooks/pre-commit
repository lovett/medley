#!/usr/bin/env bash

set -eu

WORK_DIR=$(mktemp -d)

cleanup() {
    rm -rf "$WORK_DIR"
}

echo "Runing pre-commit hook..."

git checkout-index --prefix="$WORK_DIR/" -af

TESTS_TO_RUN=""

# Copy staged files to the work directory.
#
# This ensures the files being checked are the files being
# committed. If the unstaged versions were used, there could be a
# false positive or false negative.
#
# The filter argument excludes deleted, copied, and renamed files.
for STAGED_FILE in $(git diff --cached --name-only --diff-filter=dcr); do
    FILE_EXTENSION="${STAGED_FILE##*.}"

    PATH_PARTS=(${STAGED_FILE//\// })

    if [[ "${PATH_PARTS[0]}" == "apps" ]]; then
        TESTS_TO_RUN="$TESTS_TO_RUN apps.${PATH_PARTS[1]}"
    fi

    if [[ "${PATH_PARTS[0]}" == "parsers" ]] || [[ "${PATH_PARTS[0]}" == "plugins" ]]; then
        TYPE="${PATH_PARTS[0]}"
        NAME=${PATH_PARTS[1]%.*} # remove file extension
        NAME=${NAME/_test/} # remove test prefix

        if [[ "$NAME" != "__init__" ]]; then
            TESTS_TO_RUN="$TESTS_TO_RUN $TYPE.$NAME"
        fi
    fi

    if [[ "$FILE_EXTENSION" == "py" ]]; then
        LINTABLE=$(curl --no-progress-meter "http://localhost:8085/lintable/$STAGED_FILE")

        if [[ "$LINTABLE" == "yes" ]]; then
            echo "Linting $STAGED_FILE with mypy..."
            ./venv/bin/mypy "$WORK_DIR/$STAGED_FILE"

            echo "Linting $STAGED_FILE with flake8..."
            ./venv/bin/flake8 "$WORK_DIR/$STAGED_FILE"

            echo "Linting $STAGED_FILE with pylint..."
            ./venv/bin/pylint --rcfile=.pylintrc "$WORK_DIR/$STAGED_FILE"

            curl --no-progress-meter -X PUT -d "" "http://localhost:8085/lintable/$STAGED_FILE"
        fi
    fi
done

# Run the relevant test suites after stripping duplicates.
#
# Duplicates can occur when a test target and a test suite are being
# checked in at the same time.
if [[ ! -z "$TESTS_TO_RUN" ]]; then
    echo "$TESTS_TO_RUN"
    make $(echo "$TESTS_TO_RUN" | tr " " "\n" | sort -u | tr "\n" " ")
fi


trap "cleanup" EXIT

---
- name: Delete previous backup
  become: true
  file:
    path={{ project_backup }}
    state=absent

- name: Stat current installation
  stat:
    path={{ project_root  }}
  register: install_check

- name: Backup current installation
  become: true
  when: install_check.stat.exists
  command: mv {{ project_root }} {{ project_backup }}

- name: Create application root
  become: true
  file:
    path={{ project_root }}
    state=directory

- name: Rsync application files to new application root
  become: true
  synchronize:
    src: "../../../../"
    dest: "{{ project_root }}"
    delete: true
    recursive: true
    rsync_opts:
      - "--cvs-exclude"

- name: Salvage virtualenv from previous installation
  become: true
  command: cp -r {{ project_backup }}/venv {{ project_root }}/venv
  when: install_check.stat.isdir is defined and install_check.stat.isdir

- name: Stat venv
  stat:
    path={{ project_root }}/venv
  register: venv_check

- name: Create python3 virtualenv
  shell: "python3 -m venv {{ project_root }}/venv"
  become: true
  when: venv_check.stat.isdir is not defined

# Saved for the future reference
# - name: Create python3 virtualenv
#   become: true
#   make:
#     chdir: "{{ project_temp_root}}"
#     target: venv

- name: Set permissions on new application root
  become: true
  file:
    path: "{{ project_root}}"
    recurse: yes
    owner: "{{ project_user }}"
    group: "{{ project_group }}"

- name: Upgrade pip and setuptools
  become: true
  become_user: "{{ project_user }}"
  pip:
    name: "{{ item }}"
    extra_args: --upgrade
    virtualenv: "{{ project_root }}/venv"
  with_items:
    - pip
    - setuptools


- name: Install python3 application packages
  become: true
  become_user: "{{ project_user }}"
  pip:
    requirements={{ project_root }}/requirements.txt
    virtualenv={{ project_root }}/venv

- name: Stat global config
  stat:
    path="/etc/medley.conf"
  register: global_config_check

- name: Place config file in /etc
  become: true
  command: cp medley.conf.example /etc/medley.conf
  args:
    chdir: "{{ project_root }}"
  when: global_config_check.stat.exists == False

- name: Install medley systemd service files
  become: true
  copy: src={{ item }} dest=/etc/systemd/system/
  with_items:
    - files/medley.service
    - files/medley-geodb.service
    - files/medley-geodb.timer
    - files/medley-db-maintenance.service
    - files/medley-db-maintenance.timer
    - files/medley-fs-maintenance.service
    - files/medley-fs-maintenance.timer

- name: Enable medley systemd service
  become: true
  systemd:
    daemon_reload: yes
    enabled: yes
    masked: no
    name: medley
    state: restarted

- name: Enable medley systemd timers
  become: true
  systemd:
    daemon_reload: yes
    enabled: yes
    masked: no
    name: "{{ item }}"
    state: started
  with_items:
    - medley-geodb.timer
    - medley-db-maintenance.timer
    - medley-fs-maintenance.timer

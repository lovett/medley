---
# The relative path used in the src parameter is the distance from
# this file to the application root.
#
# The rsync_opts parameter is specified to give special treatment to
# files that would otherwise be subject to unwanted removal due to use
# of the delete paramter. Although most exclusions are specifed in
# .rsync-filter at the application root, the requirements files and
# the virtualenv need to be handled as "exclude without delete"
# instead of "exlude and delete" like everything else.
- name: Rsync application files
  become: true
  synchronize:
    src: "../../../../"
    dest: "{{ project_root }}"
    delete: true
    recursive: true
    rsync_opts:
      - "--exclude=venv"
      - "--exclude=.cache"
      - "--exclude=requirements.txt"
      - "--exclude=requirements-audio.txt"

- name: Clear template cache
  become: true
  file:
    path="/var/cache/{{ project_name }}/jinja"
    state="absent"

# The shell module is used to create the virtualenv for simplicity.
# The pip module could do it, but needs a virtualenv executable which
# the Debian python3-virtualenv package somehow doesn't provide. All
# of which is a lot of fuss for what could otherwise be a one-liner.
- name: Create python3 virtualenv
  shell: "python3 -m venv {{ project_root }}/venv"
  args:
    creates: "{{ project_root }}/venv"
  become: true
  register: venv

- name: Install main requirements file
  become: true
  copy:
    src: "../../../../requirements.txt"
    dest: "{{ project_root }}/requirements.txt"
  register: requirements

- name: Install audio requirements file
  become: true
  copy:
    src: "../../../../requirements-audio.txt"
    dest: "{{ project_root }}/requirements-audio.txt"
  register: requirements_audio

- name: Install python application packages
  become: true
  become_user: "{{ project_user }}"
  pip:
    requirements: "{{ project_root }}/requirements.txt"
    virtualenv: "{{ project_root }}/venv"
  when: requirements.changed

- name: Install python audio packages
  become: true
  become_user: "{{ project_user }}"
  pip:
    requirements: "{{ project_root }}/requirements-audio.txt"
    virtualenv: "{{ project_root }}/venv"
  when: requirements_audio.changed

- name: Set permissions on application root
  become: true
  file:
    path: "{{ project_root }}"
    recurse: yes
    owner: "{{ project_user }}"
    group: "{{ project_group }}"

- name: Install global config
  become: true
  copy:
    src: "files/medley.conf"
    dest: "/etc/medley.conf"
    owner: "{{ project_user }}"
    group: "{{ project_group }}"

- name: Install primary systemd service
  become: true
  template:
    src: "templates/medley.service.j2"
    dest: "/etc/systemd/system/medley.service"

- name: Install supplemental systemd services
  become: true
  copy: src={{ item }} dest=/etc/systemd/system/
  with_items:
    - files/medley-geodb.service
    - files/medley-geodb.timer
    - files/medley-db-maintenance.service
    - files/medley-db-maintenance.timer
    - files/medley-fs-maintenance.service
    - files/medley-fs-maintenance.timer
    - files/medley-headlines.service
    - files/medley-headlines.timer
  register: services

- name: Enable medley systemd service
  become: true
  systemd:
    daemon_reload: yes
    enabled: yes
    masked: no
    name: medley
    state: restarted

- name: Enable medley systemd timers
  become: true
  systemd:
    daemon_reload: yes
    enabled: yes
    masked: no
    name: "{{ item }}"
    state: started
  with_items:
    - medley-geodb.timer
    - medley-db-maintenance.timer
    - medley-fs-maintenance.timer
    - medley-headlines.timer
  when: services.changed

- name: Check server availability
  uri:
    url: "http://localhost:8085/"
    status_code: 200
  register: this
  until: this.status == 200
  retries: 6
  delay: 10
